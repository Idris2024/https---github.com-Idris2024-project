
const express = require('express');
const app = express();
const port = 3000;
app.use(express.json());
app.get('/', (req, res) => {
res.send('Hello world!');
});
app.get('/api/users', (req, res) => {
  const users = [
    { id: 1, name: 'John Doe' },
    { id: 2, name: 'Jane Doe' }
  ];
  res.json(users);
});
// - POST Endpoint: Create a new user.
// === javascript ===
app.post('/api/users', (req, res) => {
  const newUser = req.body;
  // Assume newUser is added to the database
  res.status(201).json(newUser);
});

app.use((req, res, next) => {
  console.log(`${req.method} request for '${req.url}'`);
  next();
});
// - Error Handling: Handle errors gracefully.
// === javascript ===
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

    // AUTHENTICATION

    const jwt = require('jsonwebtoken');

    app.post('/api/login', (req, res) => {
      const user = { id: 1, username: 'user' };
      const token = jwt.sign({ user }, 'secret_key');
      res.json({ token });
    });

    const verifyToken = (req, res, next) => {
      const token = req.headers['authorization'];
      if (!token) res.sendStatus(403);
      jwt.verify(token, 'secret_key', (err, decoded) => {
        if (err) res.sendStatus(403);
        req.user = decoded.user;
        next();
      });
    };
    
  // - Protect routes using the `verifyToken` middleware.
  //   === javascript ===
    app.get('/api/protected', verifyToken, (req, res) => {
      res.json({ message: 'This is protected data' });
    });
console.log('==========java scripts========');
  // - Use libraries like `Joi` for validating request data.
  //    === javascript ===

  const Joi = require('joi');

     const userSchema = Joi.object({
       id: Joi.number().integer().required(),
       name: Joi.string().min(3).required()
     });

     app.post('/api/users', (req, res) => {
       const { error } = userSchema.validate(req.body);
       if (error) return res.status(400).send(error.details[0].message);
       const newUser = req.body;
       res.status(201).json(newUser);
     });

  let users = [
    { id: 1, name: 'Joun Doe' },
    { id: 2, name: 'Jane Smith' },
    { id: 3, name: 'Idris Nasiru' }
  ];
  
  
  // Create
  app.post('/users', (req, res) => {
     const newUser = { id: users.length + 1, name: req.body.name };
    users.push(newUser);
    res.status(201).json(newUser);
  });

  // Read
app.get('/users', (req, res) => {
  res.json(users);
});


// Read by ID
app.get('/users/:id', (req, res) => {
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).send('User not found');
  res.json(user);
});


// Update
app.put('/users/:id', (req, res) => {
  const user = users.find(u => u.id === parseInt(req.params.id));
  if (!user) return res.status(404).send('User not found');
  user.name = req.body.name;
  res.json(user);
});


// Delete
app.delete('/users/:id', (req, res) => {
  const userIndex = users.findIndex(u => u.id === parseInt(req.params.id));
  if (userIndex === -1) return res.status(404).send('User not found');
  users.splice(userIndex, 1);
  res.status(204).send();
});


  
  

app.listen(port, () => {
console.log('server running  at http://localhost:${port}');
});

